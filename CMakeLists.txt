cmake_minimum_required(VERSION 2.8.3)
project(lightning)

add_compile_options(-std=c++11)
## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  trajectory_msgs
  std_msgs
  moveit_planners_ompl
  moveit_ros_planning
  moveit_core
  roscpp
  rospy
  actionlib_msgs
  moveit_msgs
  message_generation
)

find_package(Boost REQUIRED COMPONENTS thread)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  Float64Array.msg
  Status.msg
  DrawPoints.msg
  Stats.msg
  RRStats.msg
  Float64Array2D.msg
  IntArray2D.msg
  IntArray.msg
  StopPlanning.msg
  PlannerType.msg
)

## Generate services in the 'srv' folder
add_service_files(
  FILES
  CollisionCheck.srv
  PathShortcut.srv
  ManagePathLibrary.srv
)

## Generate actions in the 'action' folder
add_action_files(
  FILES
  PFS.action
  RR.action
  Update.action
)

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
  trajectory_msgs
  actionlib_msgs
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
#  LIBRARIES lightningros
  CATKIN_DEPENDS message_runtime trajectory_msgs std_msgs moveit_planners_ompl moveit_ros_planning roscpp rospy moveit_core moveit_msgs collision_detection planning_scene_monitor
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(include)
include_directories(
  ${Boost_INCLUDE_DIRS}
  ${catkin_INCLUDE_DIRS}
)

## Declare a cpp library
add_library(collision_checker_l
  src/tools/collision_checker.cpp
  src/tools/collision_utils.cpp
)
add_library(planner_stoppable_l src/planner_stoppable/planner_stoppable.cpp)

## Declare a cpp executable
add_executable(path_shortcutter src/tools/path_shortcutter.cpp)
add_executable(planner_stoppable src/planner_stoppable/planner_stoppable_main.cpp)
add_executable(collision_check_service src/tools/collision_check_service.cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
add_dependencies(collision_checker_l lightning_gencpp)
add_dependencies(planner_stoppable_l lightning_gencpp)
add_dependencies(path_shortcutter lightning_gencpp)
add_dependencies(planner_stoppable lightning_gencpp)
add_dependencies(collision_check_service lightning_gencpp)

## Specify libraries to link a library or executable target against
target_link_libraries(collision_checker_l
  ${catkin_LIBRARIES}
)

target_link_libraries(planner_stoppable_l
  ${catkin_LIBRARIES}
)

target_link_libraries(path_shortcutter
  collision_checker_l
  ${catkin_LIBRARIES}
)

target_link_libraries(planner_stoppable
  planner_stoppable_l
  ${catkin_LIBRARIES}
)

target_link_libraries(collision_check_service
  collision_checker_l
  ${catkin_LIBRARIES}
)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS lightningros lightningros_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_lightningros.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

# automatically generate messages
rosbuild_find_ros_package(actionlib_msgs)
include(${actionlib_msgs_PACKAGE_PATH}/cmake/actionbuild.cmake)
genaction()
rosbuild_genmsg()
